//variable that records all log entries generated by this script. This should exist in any script meant to be used by the script injector
public static list<string> logEntries = new list<string>();

public static map<string,object> runtimeVars  {
	get {
		map<string,object> runTimeVars = new map<string,object>();
		//---- RunTimeVars Injected Here. Any code between the start and stop tags will be over written with the contents from the variables file when the script injector is run.-----//
		//runTimeVars.get('numDays'), etc.
		//{INJECTIONSTART}
		//{INJECTIONEND}
		return runTimeVars;
	}set;	
}

public static void init()
{		
	try
	{
		//Your code here. Get at the injected variables with runTimeVars.get('your property name from the variables file here') and save any log statments with the writeLogEntry(logText) method.
	}
	catch(exception e)
	{
		writeLogEntry('Error on line ' + e.getLineNumber() + '. ' + e.getMessage());
		writeLogEntry(e.getStackTraceString());
	}
	
	//send a confirmation email to the running user
	sendEmail(UserInfo.getUserId(), 'Sample Email Result ' + datetime.now().format(), arrayToStringBody(logEntries));
}

/*
* @Name writeLogEntry
* @Description Wrapper for the system.debug command. Use this instead of system.debug for your script so the script injector can find the logs more easily. Also collects all log entries in the logEntries variable
* for easy printing/logging/emailing when the process is complete.
* @Param logText a string of a value to write to the debug log and record in the logEntries variable.
* @Return void
*/
public static void writeLogEntry(string logText)
{
	system.debug('\n[LOG] '+logText);
	logEntries.add(logText+'\n');
}

//sends confirmation email to running user with log of results.
public static void sendEmail(id recipUserId, string subject, string textBody)
{
	list<user> recipUser = [select username from user where id = :recipUserId];
	Messaging.SingleEmailMessage[] messages = new Messaging.SingleEmailMessage[0];
	
    messaging.SingleEmailMessage m = new messaging.SingleEmailMessage();
    m.settargetobjectid(recipUserId);
    m.setsubject(subject);
    m.setplaintextbody(textBody);
    m.setsaveasactivity(false);
	messages.add(m);
	
	Messaging.SendEmailResult[] results = messaging.sendemail(messages);
	if (results[0].success) {
		writeLogEntry('The email was sent successfully to ' + recipUser[0].username);
	} else {
		writeLogEntry('The email failed to send: ' + results[0].errors[0].message);
	}
}

//takes array of log entres and converts them into a string with each element separated for with a line break for easy emailing
public static string arrayToStringBody(list<string> stringArray)
{
	string textBody = '';
	
	for(string thisString :stringArray)
	{
		textBody += thisString + '\r\n';
	}
	
	return textBody;
}
init();



