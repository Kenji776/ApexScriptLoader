/**************************************
* @Name FixCases
* @Description A sample apex script that shows how the script injector can be used.
* @Author Kenji776 / Kenji776@gmail.com / https://iwritecrappycode.wordpress.com/
***************************************/

//variable that records all log entries generated by this script. This should exist in any script meant to be used by the script injector
public static list<string> logEntries = new list<string>();
public static map<string,object> runtimeVars  {
	get {
		map<string,object> runTimeVars = new map<string,object>();
		//---- RunTimeVars Injected Here. Any code between the start and stop tags will be over written with the contents from the variables file when the script injector is run.-----//
		//In the sample variables.json there are four variables, variableOne, variableTwo, variableThree and variableFour. If I want to access their values in this script I can simple reference them as
		//runTimeVars.get('variableOne'), etc.
		//{INJECTIONSTART}
		//{INJECTIONEND}
		return runTimeVars;
	}set;	
}
//*************************************** These two methods should be in any script you right ********************************************//
/*
* @Name writeLogEntry
* @Description Wrapper for the system.debug command. Use this instead of system.debug for your script so the script injector can find the logs more easily. Also collects all log entries in the logEntries variable
* for easy printing/logging/emailing when the process is complete.
* @Param logText a string of a value to write to the debug log and record in the logEntries variable.
* @Return void
*/
public static void writeLogEntry(string logText)
{
	system.debug('\n[LOG] '+logText);
	logEntries.add(logText);
}

/*
* @Name runTimeVariables
* @Description The contents of this method will be modified when the script injector is run. It will insert the contents of your variables.json file in between the two tags converted to a map of string/object.
* So if you can expect certain values to be in the file, perhaps being set by another system or even just want to keep things configruable you can store values in that file and they will be available in the object
* returned by this method.
* @Return void
*/

//main method		
public static void init()
{
	datetime lastTwoDays = date.today().addDays(-2);
	list<case> cases = [select id, status, ownerId, account.name, contact.name, lastmodifiedbyId, caseNumber from case where status = 'Submitted to BCL' and createdDate >= :lastTwoDays order by createdDate desc];
	set<id> ownerIds = new set<id>();
	list<case> updateCases = new list<case>();

	try
	{
		writeLogEntry('Found ' + cases.size() + ' potential cases to process');

		//deduplicate cases by owner Id so we don't reprocess duplicate cases for the same person
		for(case thisCase: cases)
		{
			if(!ownerIds.contains(thiscase.Id)){ 
				updateCases.add(thisCase);
				writeLogEntry('Found Case Id: ' + thisCase.Id + '. Number: ' + thisCase.caseNumber + '. Account: ' + thisCase.Account.Name + '. Contact: ' + thisCase.Contact.Name);
			}
		}

		writeLogEntry('After deduplication there are ' + updateCases.size() + ' cases to process');

		//check to see if there are any cases to process after deuplication
		if(!updateCases.isEmpty())
		{
			for(case thisCase: updateCases)
			{			
				thisCase.status = 'Pending';
			}

			//set their status to pending so we can then later set them back
			//update updateCases;
			writeLogEntry('Set cases status to Pending');


			for(case thisCase: updateCases)
			{
				thisCase.status = 'Submitted to BCL';
			}

			//update the cases status to re-kickoff the sync process
			//update updateCases;
			writeLogEntry('Set cases status to Submitted to BCL');
		}
		else
		{
			writeLogEntry('No cases to process. Aborting.');
		}

		//send a confirmation email to the running user
		sendEmail(UserInfo.getUserId(), 'Case Reprocess Results for ' + datetime.now().format(), arrayToStringBody(logEntries));

		writeLogEntry('Case Processing done!');
	}
	catch(exception e)
	{
		writeLogEntry('Error on line ' + e.getLineNumber() + '. ' + e.getMessage());
		writeLogEntry(e.getStackTraceString());
	}
}


//sends confirmation email to running user with log of results.
public static void sendEmail(id recipUserId, string subject, string textBody)
{
	list<user> recipUser = [select username from user where id = :recipUserId];
	Messaging.SingleEmailMessage[] messages = new Messaging.SingleEmailMessage[0];
	
    messaging.SingleEmailMessage m = new messaging.SingleEmailMessage();
    m.settargetobjectid(recipUserId);
    m.setsubject(subject);
    m.setplaintextbody(textBody);
    m.setsaveasactivity(false);
	messages.add(m);
	
	Messaging.SendEmailResult[] results = messaging.sendemail(messages);
	if (results[0].success) {
		writeLogEntry('The email was sent successfully to ' + recipUser[0].username);
	} else {
		writeLogEntry('The email failed to send: ' + results[0].errors[0].message);
	}
}

//takes array of log entres and converts them into a string with each element separated for with a line break for easy emailing
public static string arrayToStringBody(list<string> stringArray)
{
	string textBody = '';
	
	for(string thisString :stringArray)
	{
		textBody += thisString + '\r\n';
	}
	
	return textBody;
}
init();












