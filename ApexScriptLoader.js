/*****************************************
*@Name Apex Script Loader
*@Author Daniel Llewellyn
*@Date 4/06/2021
*@Description Generic script loader to execute Salesforce Apex scripts. Allows for Apex script runs to be scheduled/automated without batch jobs and provides logging.
*****************************************/

const fs = require('fs');
const path = require('path')
const { exec } = require("child_process");
var params = [];
var configData = setConfigDefaults();
var scripts = [];
var scriptIndex = 0;

function init()
{
	console.log('                                    Apex Script Loader V 1.0!\r\n');
	console.log('                                   Author: Kenji776@gmail.com\r\n\r\n');

	
	const folderPath = 'scripts/';
	
	if(process.argv == null || process.argv.length <= 3)
	{
		scripts = getDirectories(folderPath);
		console.log('No script defined in input parameters. Running all scripts:');
		console.log(scripts);
	}
	else
	{
		console.log('List of scripts to run provided. Running: ' + process.argv);
		scripts = process.argv.splice(0,2);
	}
	
	loadScript(scripts[0]);
}

function loadScript(scriptName)
{
	log(scriptName,'Running Script: ' + scriptName);
	configData = readConfigs(scriptName);
	log(scriptName,'Read configurations from scripts\\' + scriptName + '\config.json\r\n');
	if(configData.applicationName) log(scriptName,'Application Name: ' + configData.applicationName + '\r\n');
	if(configData.author) log(scriptName,'Author: ' + configData.author + '\r\n');
	if(configData.description) log(scriptName,'Description: ' + configData.description + '\r\n');
	if(configData.createdDate) log(scriptName,'Created Date: ' + configData.createdDate + '\r\n');
	if(configData.apiVersion) log(scriptName,'For API Version: ' + configData.apiVersion + '\r\n');
	var d = new Date();
	d.toLocaleString();  
	
	log(scriptName,'Started process at ' + d, false);
	
	log(scriptName,'Injecting variables into script...');
	
	injectVariables(scriptName);
	
	log(scriptName,'Calling Apex script. Please wait...');

	//call to the function which will call the apex script
	runScript(scriptName, configData.apexScriptFile,configData.apexResultFile,configData.username,function(error, stdout, stderr){
		
		//if an error is detected, log all available data
		if(error || stderr)
		{
			log(scriptName,'Error Detected During Apex Script Execution',true,'red');
			log(scriptName,JSON.stringify(stderr, null, 2),true,'red');
			log(scriptName,JSON.stringify(error, null, 2),true,'red');
			log(scriptName,JSON.stringify(stderr, null, 2),true,'red');
			
		}
		
		//read from the log file generated by the apex script which is separate from the log file for this script. Extract it's log entries and append them to this ones
		fs.readFile('scripts/'+scriptName+'/'+configData.apexResultFile, 'utf8', function (err,data) {
			if (err) {
				log(scriptName,err,true,'red');
			}
			
			//get an array of system.debug log entries from the apex script and log them to the console and our own log.
			var logData = parselog(scriptName,data);
			
			if(!logData.success)
			{
				log(scriptName,'Error Detected in Apex Script or During Parsing!',true,'red');
				log(scriptName,logData.message,true,'red');
			}
			else
			{
				log(scriptName,'Script ran successfully',true,'green');						
			}
			for(i = 0; i<logData.logLines.length; i++)
			{	
				log(scriptName,logData.logLines[i]), true;
			}
			
			log(scriptName,'Done running script');
			scriptIndex++;
			if(scriptIndex < scripts.length)
			{
				log(scriptName,'Loading next script: ' + scripts[scriptIndex]);
				loadScript(scripts[scriptIndex]);
			}
			else
			{
				log(scriptName,'All scripts complete.');
			}
		});	
	});
}

function getDirectories(path) {
  return fs.readdirSync(path).filter(function (file) {
	return fs.statSync(path+'/'+file).isDirectory();
  });
}
	
//runs a pre-written apex script and writes the result to the log file specified using the username specified
function runScript(scriptName, apexScriptFileName,apexResultFileName,username,callback){
	runCommand('sfdx force:apex:execute -f scripts/'+scriptName+'/'+apexScriptFileName+' -u '+username+ '>scripts/'+scriptName+'/'+apexResultFileName, function(error, stdout, stderr){
		callback(error, stdout, stderr);
	});
}
function runCommand(command,callback)
{
	exec(command, (error, stdout, stderr) => {
		if (error) 
		{
			log(scriptName,error.message,true,'red');
		}
		if(callback) callback(error, stdout, stderr);
	});	
}

//Takes a text file generated by the apex script and finds any lines that start with [LOG] which denotes a debug line we wish to capture. All these lines are collected and returned in an array.
function parselog(scriptName,logText)
{
	var parseResult = {};
	parseResult.logLines = [];	
	parseResult.success = true;
	parseResult.message = '';
		
	try
	{

		const splitLines = logText.split(/\r?\n/);
					
		for(i = 0; i<splitLines.length; i++)
		{	
			
			if(splitLines[i].search('[LOG]') == 1)
			{
				parseResult.logLines.push(splitLines[i].slice(6));
			}
			else if(splitLines[i].search('Error:') > -1)
			{
				parseResult.logLines.push(splitLines[i]);
				parseResult.success = false;
				parseResult.message += splitLines[i] + '. ';
			}
		}
	}
	catch(err)
	{
		parseResult.success = false;
		parseResult.message = err.name + ': ' + err.message;
	}
	return parseResult;
}

//Logs an item to this scripts log file and optionally to the console window. May also accept a text color param of 'red', 'green', or 'yellow' which will change the text color in the terminal.
function log(scriptName,logItem,printToScreen,color)
{	
	printToScreen = printToScreen != null ? printToScreen : true;
	var colorCode='';
	switch(color) {
		case 'red':
			colorCode='\x1b[31m'
		break;
		case 'green':
			colorCode='\x1b[32m';
		break;
		case 'yellow':
			colorCode='\x1b[33m';
		default:
			colorCode='\x1b[0m';
	}
	
	
	
	if(scriptName)
	{
		if(printToScreen) console.log(colorCode+''+logItem+'\x1b[0m');
		
		fs.appendFile('scripts/'+scriptName+'/'+configData.logName, logItem + '\r\n', function (err) {
			if (err) throw err;
		});		
	}
	else
	{
		if(printToScreen) console.log(colorCode+''+logItem+'\x1b[0m');
		
		fs.appendFile('scripts/global_log.txt', logItem + '\r\n', function (err) {
			if (err) throw err;
		});		
	}
}

function readConfigs(scriptName)
{
	try
	{
		var configFileData = fs.readFileSync('scripts/'+scriptName+'/config.json', 'utf8');
		return JSON.parse(configFileData);
	}
	catch(err)
	{
		log(scriptName,'Error reading configuration file scripts/'+scriptName+'/config.json Please check it exists and is properly formatted JSON.',true,'red');
		log(scriptName,err.name + '. ' + err.message);
	}
}

//reads arguments provded when the script is called. Used for providing the name of the config file to use.
function getProvidedArguments()
{
	var params = [];
	for (var i = 2; i < process.argv.length; i++)
	{
		params.push(process.argv[i]);
	}
	
	return params;
}

function injectVariables(scriptName)
{
	if(configData.injectionVariablesFile)
	{
		var variablesArray = [];
		var apexFile = fs.readFileSync('scripts/'+scriptName+'/'+configData.apexScriptFile, 'utf8');
		var apexFileAsArray = apexFile.split(/\r?\n/);
		
		for(var j = 0; j< configData.injectionVariablesFile.length; j++)
		{
			try
			{
				log(scriptName,'Reading injectable variables from file scripts/'+scriptName+'/'+configData.injectionVariablesFile[j]);
							
				var variablesFile = fs.readFileSync('scripts/'+scriptName+'/'+configData.injectionVariablesFile[j], 'utf8');
				var variablesJson =  JSON.parse(variablesFile);
				
				console.log(scriptName,variablesJson);
					
				Object.keys(variablesJson).forEach(function(key) {
					var newLine = "runTimeVars.put('"+key+"',"+JSON.stringify(variablesJson[key]).replace(/"/g, '\'')+");";
					variablesArray.push(newLine);
				});	
			}
			catch(err)
			{
				log(scriptName,'Unable to read JSON from file, please ensure file exists and is valid JSON',true,'red');
			}
		}
		
		console.log(scriptName,'All loaded variables');
		console.log(scriptName,variablesArray);
		var insertPosition = 0;
		var numLinesToRemove = 0;
		for(var i = 0; i < apexFileAsArray.length; i++)
		{
			if(apexFileAsArray[i].search('{INJECTIONSTART}') > -1)
			{		
				insertPosition = i+1;
			}	
			if(apexFileAsArray[i].search('{INJECTIONEND}') > -1)
			{			
				numLinesToRemove = i-insertPosition;

			}			
		}
		
		//remove all old elements between the two markers.
		apexFileAsArray.splice(insertPosition,numLinesToRemove);
		
		//insert the new elements
		apexFileAsArray.insert(insertPosition, variablesArray.join('\r\n'));
		
		//create new file content from the array of lines
		var newFile = apexFileAsArray.join('\r\n');
		
		console.log(scriptName,'Done Injecting variables!');
		
		fs.writeFileSync('scripts/'+scriptName+'/'+configData.apexScriptFile, newFile + '\r\n', function (err) {
			if (err) throw err;
		});
	}
	
}
//provides default values for required parameters in case they are not given in the config file.
function setConfigDefaults()
{
	var configObject = {};
	configObject.apexScriptFile = 'apexScript.apex';
	configObject.apexResultFile = 'apexScriptResult.log';
	configObject.logName = 'log.txt';
	return configObject;
}

//global error handler.
process.on('uncaughtException', (err) => {
    log(null,err,true,'red');
    process.exit(1) //mandatory (as per the Node docs)
})


Array.prototype.insert = function ( index, item ) {
    this.splice( index, 0, item );
};

//calls main function
init();
